{"version":3,"sources":["../src/Bugsnag.js"],"names":["NativeClient","NativeModules","BugsnagReactNative","BREADCRUMB_MAX_LENGTH","CONSOLE_LOG_METHODS","filter","console","method","Client","apiKeyOrConfig","handleUncaughtErrors","ErrorUtils","previousHandler","getGlobalHandler","setGlobalHandler","error","isFatal","config","autoNotify","shouldNotify","notify","notifyBlocking","queued","HandledState","handlePromiseRejections","tracking","require","client","enable","allRejections","onUnhandled","id","onHandled","beforeSendCallback","blocking","postSendCallback","_handledState","Error","warn","report","Report","apiKey","addMetadata","codeBundleId","beforeSendCallbacks","callback","payload","toJSON","setUser","name","email","clearUser","startSession","leaveBreadcrumb","metadata","length","undefined","includes","type","breadcrumbMetaData","enableConsoleBreadcrumbs","forEach","originalFn","args","severity","test","message","map","stringified","String","arg","e","JSON","stringify","join","apply","_restore","disableConsoleBreadCrumbs","Configuration","startWithOptions","consoleBreadcrumbsEnabled","releaseStage","notifyReleaseStages","registerBeforeSendCallback","push","unregisterBeforeSendCallback","index","indexOf","splice","clearBeforeSendCallbacks","endpoint","delivery","sessionsEndpoint","appVersion","version","autoCaptureSessions","automaticallyCollectBreadcrumbs","StandardDelivery","__DEV__","originalSeverity","unhandled","severityReason","section","key","value","defaultSeverity","isValidReason","severityType","isUnhandled","context","errorClass","errorMessage","groupingHash","stacktrace","user","constructor","stack"],"mappings":"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","file":"Bugsnag.js","sourcesContent":["/* global ErrorUtils, __DEV__ */\n\nimport { NativeModules } from 'react-native'\nimport serializeForNativeLayer from './NativeSerializer'\n\nconst NativeClient = NativeModules.BugsnagReactNative\n\nconst BREADCRUMB_MAX_LENGTH = 30\nconst CONSOLE_LOG_METHODS = [ 'log', 'debug', 'info', 'warn', 'error' ].filter(method =>\n  typeof console[method] === 'function'\n)\n\n/**\n * A Bugsnag monitoring and reporting client\n */\nexport class Client {\n  /**\n   * Creates a new Bugsnag client\n   */\n  constructor (apiKeyOrConfig) {\n    if (typeof apiKeyOrConfig === 'string' || typeof apiKeyOrConfig === 'undefined') {\n      this.config = new Configuration(apiKeyOrConfig)\n    } else if (apiKeyOrConfig instanceof Configuration) {\n      this.config = apiKeyOrConfig\n    } else {\n      throw new Error('Bugsnag: A client must be constructed with an API key or Configuration')\n    }\n\n    if (NativeClient) {\n      NativeClient.startWithOptions(this.config.toJSON())\n      this.handleUncaughtErrors()\n      if (this.config.handlePromiseRejections) { this.handlePromiseRejections() }\n      if (this.config.consoleBreadcrumbsEnabled) { this.enableConsoleBreadcrumbs() }\n    } else {\n      throw new Error('Bugsnag: No native client found. Is BugsnagReactNative installed in your native code project?')\n    }\n  }\n\n  /**\n   * Registers a global error handler which sends any uncaught error to\n   * Bugsnag before invoking the previous handler, if any.\n   */\n  handleUncaughtErrors = () => {\n    if (ErrorUtils) {\n      const previousHandler = ErrorUtils.getGlobalHandler()\n\n      ErrorUtils.setGlobalHandler((error, isFatal) => {\n        if (this.config.autoNotify && this.config.shouldNotify()) {\n          this.notify(error, null, !!NativeClient.notifyBlocking, (queued) => {\n            if (previousHandler) {\n              previousHandler(error, isFatal)\n            }\n          }, new HandledState('error', true, 'unhandledException'))\n        } else if (previousHandler) {\n          previousHandler(error, isFatal)\n        }\n      })\n    }\n  }\n\n  handlePromiseRejections = () => {\n    const tracking = require('promise/setimmediate/rejection-tracking')\n    const client = this\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: function (id, error) {\n        client.notify(error, null, false, null, new HandledState('error', true, 'unhandledPromiseRejection'))\n      },\n      onHandled: function () {}\n    })\n  }\n\n  /**\n   * Sends an error report to Bugsnag\n   * @param error               The error instance to report\n   * @param beforeSendCallback  A callback invoked before the report is sent\n   *                            so additional information can be added\n   * @param blocking            When true, blocks the native thread execution\n   *                            until complete. If unspecified, sends the\n   *                            request asynchronously\n   * @param postSendCallback    Callback invoked after request is queued\n   */\n  notify = async (error, beforeSendCallback, blocking, postSendCallback, _handledState) => {\n    if (!(error instanceof Error)) {\n      console.warn('Bugsnag could not notify: error must be of type Error')\n      if (postSendCallback) { postSendCallback(false) }\n      return\n    }\n    if (!this.config.shouldNotify()) {\n      if (postSendCallback) { postSendCallback(false) }\n      return\n    }\n\n    const report = new Report(this.config.apiKey, error, _handledState)\n    report.addMetadata('app', 'codeBundleId', this.config.codeBundleId)\n\n    for (const callback of this.config.beforeSendCallbacks) {\n      if (callback(report, error) === false) {\n        if (postSendCallback) { postSendCallback(false) }\n        return\n      }\n    }\n    if (beforeSendCallback) {\n      beforeSendCallback(report)\n    }\n\n    const payload = report.toJSON()\n    if (blocking && NativeClient.notifyBlocking) {\n      NativeClient.notifyBlocking(payload, blocking, postSendCallback)\n    } else {\n      NativeClient.notify(payload)\n      if (postSendCallback) { postSendCallback(true) }\n    }\n  }\n\n  setUser = (id, name, email) => {\n    NativeClient.setUser({id, name, email})\n  }\n\n  /**\n   * Clear custom user data and reset to the default device identifier\n   */\n  clearUser = () => {\n    NativeClient.clearUser()\n  }\n\n  startSession = () => {\n    NativeClient.startSession()\n  }\n\n  /**\n   * Leaves a 'breadcrumb' log message. The most recent breadcrumbs\n   * are attached to subsequent error reports.\n   */\n  leaveBreadcrumb = (name, metadata) => {\n    if (typeof name !== 'string') {\n      console.warn(`Breadcrumb name must be a string, got '${name}'. Discarding.`)\n      return\n    }\n\n    if (name.length > BREADCRUMB_MAX_LENGTH) {\n      console.warn(`Breadcrumb name exceeds ${BREADCRUMB_MAX_LENGTH} characters (it has ${name.length}): ${name}. It will be truncated.`)\n    }\n\n    // Checks for both `null` and `undefined`.\n    if ([ undefined, null ].includes(metadata)) {\n      metadata = {}\n    } else if (typeof metadata === 'string') {\n      metadata = { 'message': metadata }\n    } else if (typeof metadata !== 'object') {\n      console.warn(`Breadcrumb metadata must be an object or string, got '${metadata}'. Discarding metadata.`)\n      metadata = {}\n    }\n\n    const {\n      type = 'manual',\n      ...breadcrumbMetaData\n    } = metadata\n\n    NativeClient.leaveBreadcrumb({\n      name,\n      type,\n      metadata: serializeForNativeLayer(breadcrumbMetaData)\n    })\n  }\n\n  /**\n   * Wraps all console log functions with a function that will leave a breadcrumb for\n   * each call, while continuing to call through to the original.\n   *\n   *   !!! Warning !!!\n   *   This will cause all log messages to originate from Bugsnag, rather than the\n   *   actual callsite of the log function in your source code.\n   */\n  enableConsoleBreadcrumbs = () => {\n    CONSOLE_LOG_METHODS.forEach(method => {\n      const originalFn = console[method]\n      console[method] = (...args) => {\n        try {\n          this.leaveBreadcrumb('Console', {\n            type: 'log',\n            severity: /^group/.test(method) ? 'log' : method,\n            message: args\n              .map(arg => {\n                let stringified\n                // do the best/simplest stringification of each argument\n                try { stringified = String(arg) } catch (e) {}\n                // unless it stringifies to [object Object], use the toString() value\n                if (stringified && stringified !== '[object Object]') return stringified\n                // otherwise attempt to JSON stringify (with indents/spaces)\n                try { stringified = JSON.stringify(arg, null, 2) } catch (e) {}\n                // any errors, fallback to [object Object]\n                return stringified\n              })\n              .join('\\n')\n          })\n        } catch (error) {\n          console.warn(`Unable to serialize console.${method} arguments to Bugsnag breadcrumb.`, error)\n        }\n        originalFn.apply(console, args)\n      }\n      console[method]._restore = () => { console[method] = originalFn }\n    })\n  }\n\n  disableConsoleBreadCrumbs = () => {\n    CONSOLE_LOG_METHODS.forEach(method => {\n      if (typeof console[method]._restore === 'function') console[method]._restore()\n    })\n  }\n}\n\n/**\n * Configuration options for a Bugsnag client\n */\nexport class Configuration {\n  constructor (apiKey) {\n    const metadata = require('../package.json')\n    this.version = metadata['version']\n    this.apiKey = apiKey\n    this.delivery = new StandardDelivery()\n    this.beforeSendCallbacks = []\n    this.notifyReleaseStages = undefined\n    this.releaseStage = undefined\n    this.appVersion = undefined\n    this.codeBundleId = undefined\n    this.autoCaptureSessions = false\n    this.autoNotify = true\n    this.handlePromiseRejections = !__DEV__ // prefer banner in dev mode\n    this.consoleBreadcrumbsEnabled = false\n    this.automaticallyCollectBreadcrumbs = true\n  }\n\n  /**\n   * Whether reports should be sent to Bugsnag, based on the release stage\n   * configuration\n   */\n  shouldNotify = () => {\n    return !this.releaseStage ||\n      !this.notifyReleaseStages ||\n      this.notifyReleaseStages.includes(this.releaseStage)\n  }\n\n  /**\n   * Adds a function which is invoked after an error is reported but before\n   * it is sent to Bugsnag. The function takes a single parameter which is\n   * an instance of Report.\n   */\n  registerBeforeSendCallback = (callback) => {\n    this.beforeSendCallbacks.push(callback)\n  }\n\n  /**\n   * Remove a callback from the before-send pipeline\n   */\n  unregisterBeforeSendCallback = (callback) => {\n    const index = this.beforeSendCallbacks.indexOf(callback)\n    if (index !== -1) {\n      this.beforeSendCallbacks.splice(index, 1)\n    }\n  }\n\n  /**\n   * Remove all callbacks invoked before reports are sent to Bugsnag\n   */\n  clearBeforeSendCallbacks = () => {\n    this.beforeSendCallbacks = []\n  }\n\n  toJSON = () => {\n    return {\n      apiKey: this.apiKey,\n      codeBundleId: this.codeBundleId,\n      releaseStage: this.releaseStage,\n      notifyReleaseStages: this.notifyReleaseStages,\n      endpoint: this.delivery.endpoint,\n      sessionsEndpoint: this.delivery.sessionsEndpoint,\n      appVersion: this.appVersion,\n      autoNotify: this.autoNotify,\n      version: this.version,\n      autoCaptureSessions: this.autoCaptureSessions,\n      automaticallyCollectBreadcrumbs: this.automaticallyCollectBreadcrumbs\n    }\n  }\n}\n\nexport class StandardDelivery {\n  constructor (endpoint, sessionsEndpoint) {\n    this.endpoint = endpoint\n    this.sessionsEndpoint = sessionsEndpoint\n  }\n}\n\nclass HandledState {\n  constructor (originalSeverity, unhandled, severityReason) {\n    this.originalSeverity = originalSeverity\n    this.unhandled = unhandled\n    this.severityReason = severityReason\n  }\n}\n\n/**\n * A report generated from an error\n */\nexport class Report {\n  constructor (apiKey, error, _handledState) {\n    this.apiKey = apiKey\n    this.errorClass = error.constructor.name\n    this.errorMessage = error.message\n    this.context = undefined\n    this.groupingHash = undefined\n    this.metadata = {}\n    this.stacktrace = error.stack\n    this.user = {}\n\n    if (!_handledState || !(_handledState instanceof HandledState)) {\n      _handledState = new HandledState('warning', false, 'handledException')\n    }\n\n    this.severity = _handledState.originalSeverity\n    this._handledState = _handledState\n  }\n\n  /**\n   * Attach additional diagnostic data to the report. The key/value pairs\n   * are grouped into sections.\n   */\n  addMetadata = (section, key, value) => {\n    if (!this.metadata[section]) {\n      this.metadata[section] = {}\n    }\n    this.metadata[section][key] = value\n  }\n\n  toJSON = () => {\n    if (!this._handledState || !(this._handledState instanceof HandledState)) {\n      this._handledState = new HandledState('warning', false, 'handledException')\n    }\n    // severityReason must be a string, and severity must match the original\n    // state, otherwise we assume that the user has modified _handledState\n    // in a callback\n    const defaultSeverity = this._handledState.originalSeverity === this.severity\n    const isValidReason = (typeof this._handledState.severityReason === 'string')\n    const severityType = defaultSeverity && isValidReason\n      ? this._handledState.severityReason : 'userCallbackSetSeverity'\n\n    // if unhandled not set, user has modified the report in a callback\n    // or via notify, so default to false\n    const isUnhandled = (typeof this._handledState.unhandled === 'boolean') ? this._handledState.unhandled : false\n\n    return {\n      apiKey: this.apiKey,\n      context: this.context,\n      errorClass: this.errorClass,\n      errorMessage: this.errorMessage,\n      groupingHash: this.groupingHash,\n      metadata: serializeForNativeLayer(this.metadata),\n      severity: this.severity,\n      stacktrace: this.stacktrace,\n      user: this.user,\n      defaultSeverity: defaultSeverity,\n      unhandled: isUnhandled,\n      severityReason: severityType\n    }\n  }\n}\n"]}